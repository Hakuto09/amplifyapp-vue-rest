import os
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from mangum import Mangum
from aws_lambda_powertools import Logger
from pydantic import BaseModel
import boto3
import uuid
from boto3.dynamodb.conditions import Key, Attr
import json

# 環境変数取得
ENV = os.environ['ENV']
print('ENV ', ENV)
#STORAGE_DB_NAME = os.environ.get("STORAGE_DB_NAME")
STORAGE_DB_NAME = 'dynamo29652a67-dev'      # for debug only.
print('STORAGE_DB_NAME ', STORAGE_DB_NAME)
STORAGE_DB_ACCOUNTS = 'amplifyappvuerest_accounts'
print('STORAGE_DB_NAME ', STORAGE_DB_ACCOUNTS)
STORAGE_DB_DGROUPS = 'amplifyappvuerest_dgroup'
print('STORAGE_DB_NAME ', STORAGE_DB_DGROUPS)
STORAGE_DB_DEVICES = 'amplifyappvuerest_devices'
print('STORAGE_DB_NAME ', STORAGE_DB_DEVICES)
STORAGE_DB_DDATA = 'amplifyappvuerest_ddata'
print('STORAGE_DB_NAME ', STORAGE_DB_DDATA)

# boto3 IoT Core 初期化
iot_client = boto3.client('iot')

# boto3 DynamoDB 初期化
ddb = boto3.resource("dynamodb")
ddb_table = ddb.Table(STORAGE_DB_NAME)
ddb_table_accounts = ddb.Table(STORAGE_DB_ACCOUNTS)
ddb_table_dgroups = ddb.Table(STORAGE_DB_DGROUPS)
ddb_table_devices = ddb.Table(STORAGE_DB_DEVICES)
ddb_table_ddata = ddb.Table(STORAGE_DB_DDATA)

ddb_client = boto3.client('dynamodb')


## FastAPI 初期化
app = FastAPI(
    title="AmplifyFastAPI",
    root_path=f"/{ENV}",
    openapi_url="/openapi.json"
)

# ロガー初期化
app.logger = Logger(level="INFO", service=__name__)

# CORS設定
allow_origins = ['http://localhost:8080']
if 'ALLOW_ORIGIN' in os.environ.keys():
    allow_origins.append(os.environ['ALLOW_ORIGIN'])

app.add_middleware(
    CORSMiddleware,
    allow_origins=allow_origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# スキーマ設定
class Request_Item(BaseModel):
    """
    リクエストスキーマ
    """
    id: str
    createdAt: str

class Response_Item(BaseModel):
    """
    レスポンススキーマ
    """
    id: str
    createdAt: str

class Request_Account(BaseModel):
    """
    アカウント用リクエストスキーマ
    """
    account_id: str
    account_name: str
    email: str
    password: str

class Response_Account(BaseModel):
    """
    アカウント用レスポンススキーマ
    """
    account_name: str
    email: str
    password: str

class Request_DGroup(BaseModel):
    """
    デバイスグループ用リクエストスキーマ
    """
#    dgroup_id: str
    dgroup_name: str
    account_id: str

class Response_DGroup(BaseModel):
    """
    デバイスグループ用レスポンススキーマ
    """
#    dgroup_name: str
    thingGroupName: str
    thingGroupId: str
#    account_id: str

@app.get("/items")
def get_items_list():
    """
    Item 一覧を取得する
    """
    print('get_items_list(): In')

    # Item 一覧取得処理を書く
    return {
        "id": "test",
        "createdAt": "2000-04-25T12:00:01+09:00"
    }

#    response = ddb_table.query(
#      KeyConditionExpression = Key("id").eq(id), # 取得するKey情報
#      ScanIndexForward = False, # 昇順か降順か(デフォルトはTrue=昇順)
#      Limit = 1 # 取得するデータ件数
#    )
#    print('response ', response)
#
#    return response["Items"]

@app.get("/accounts")
def get_accounts_list():
    """
    アカウントの一覧を取得する
    """
    print('get_accounts_list(): In')

    response = ddb_client.scan(
      TableName = STORAGE_DB_ACCOUNTS,
      Limit = 100 # 取得するデータ件数
    )
    print('response ', response)

    return response["Items"]

@app.get("/items/{id}")
def get_items(id: str):
    """
    Item アイテムを取得する
    """
    print('get_items(): In')
    print('id ', id)

#    key = {
#        "id": id
#    }
#    print('id ', id)
#    print('key ', key)

    #response = ddb_table.get_item(Key=key)
    #print('response ', response)

    #queryData = ddb_table.query(
    response = ddb_table.query(
    #  KeyConditionExpression = Key("id").eq("your-partition-key-data") & Key("createdAt").eq("your-sort-key-data"), # 取得するKey情報
      KeyConditionExpression = Key("id").eq(id), # 取得するKey情報
#      FilterExpression = Attr('devices').contains('d0001'),
      ScanIndexForward = False, # 昇順か降順か(デフォルトはTrue=昇順)
#      Limit = 1 # 取得するデータ件数
    )
    #print('queryData ', queryData)
    print('response ', response)

#    return Response.parse_obj(response["Item"])    # Error
#    return Response.parse_obj(response["Items"])   # Error
#    print('Befre return Response.parse_obj(response["LastEvaluatedKey"])')
#    return Response.parse_obj(response["LastEvaluatedKey"])    # OK
#    print('Befre return Response.parse_obj(response["Items"][0])')
#    return Response.parse_obj(response["Items"][0])     #OK
    print('Befre return response["Items"]')
    return response["Items"]

@app.get("/items2/{id}")
def get_items_between(id: str, createdat_min: str, createdat_max: str):
    """
    Item アイテムを取得する
    """
    print('get_items_between(): In')
    print('createdat_min ', createdat_min)
    print('createdat_max ', createdat_max)

    key = {
        "id": id
    }
    print('key ', key)

    response = ddb_table.query(
    #  KeyConditionExpression = Key("id").eq("your-partition-key-data") & Key("createdAt").eq("your-sort-key-data"), # 取得するKey情報
      KeyConditionExpression = Key("id").eq(id), # 取得するKey情報
#      FilterExpression = Attr('createdAt').contains('d0001'),
      FilterExpression = Attr('createdAt2').between(createdat_min, createdat_max),
      ScanIndexForward = False, # 昇順か降順か(デフォルトはTrue=昇順)
#      Limit = 1 # 取得するデータ件数
    )
    #print('queryData ', queryData)
    print('response ', response)

    print('Befre return response["Items"]')
    return response["Items"]
    
@app.post("/items", response_model=Response_Item)
def post_item(item_in: Request_Item):
    """
    Itemを登録する
    """
    print('post_item(): In')

    #id = str(uuid.uuid4())
    #print('id ', id)
    create_item = item_in.dict()
    print('create_item ', create_item)
    #create_item["id"] = id
    #print('create_item["id"] ', create_item["id"])

    #print('create_item ', create_item)
    result = ddb_table.put_item(Item=create_item)
    app.logger.info(result)

    return Response_Item.parse_obj(create_item)

@app.post("/account", response_model=Response_Account)
def post_account(_in: Request_Account):
    """
    アカウントを登録する
    """
    print('post_account(): In')

    create_account = _in.dict()
    print('create_account ', create_account)

#    result_ddb = ddb_client.put_item(
    result_ddb = ddb_table_accounts.put_item(
      TableName = STORAGE_DB_ACCOUNTS,
#      Item = create_account['account_id'],
#      Item = _in['account_id'],
      Item = create_account,
    )
    print('After ddb_client.put_item():', ' result_ddb ', result_ddb)

#    return Response_Account.parse_obj(create_account)
    return Response_Account

@app.post("/dgroup", response_model=Response_DGroup)
def post_dgroup(_in: Request_DGroup):
    """
    デバイスグループを登録する
    """
    print('post_dgroup(): In')

    create_dgroup_dict = _in.dict()
    print('create_dgroup_dict ', create_dgroup_dict)
#    print('create_dgroup_dict.get(\'dgroup_id\') ', create_dgroup_dict.get('dgroup_id'))

#    json_dict = json.loads(create_dgroup)
    create_dgroup_json = json.dumps(create_dgroup_dict)     # for debug only.
#    print('json_dict:{}'.format(type(json_dict)))
    print('create_dgroup_json ', create_dgroup_json)
#    print('create_dgroup_json.get("dgroup_id") ', create_dgroup_json.get("dgroup_id"))

    # Iot Core
    result_iot = iot_client.create_thing_group(
#        thingGroupName = create_dgroup['dgroup_id'],
#        thingGroupName = _in['dgroup_id'],
#        thingGroupName = json_dict['dgroup_id'],
#        thingGroupName = create_dgroup_json["dgroup_id"],
        thingGroupName = create_dgroup_dict.get('dgroup_name'),
    )
    print('After iot_client.create_thing_group():', ' result_iot ', result_iot)

    dgroup_id = result_iot.get('thingGroupId')
    create_dgroup_dict['dgroup_id'] = dgroup_id
    print('After result_iot.get(\'thingGroupId\'):', ' create_dgroup_dict ', create_dgroup_dict)

    # Dynamo DB
#    result_ddb = ddb_client.put_item(
    result_ddb = ddb_table_dgroups.put_item(
      TableName = STORAGE_DB_DGROUPS,
      Item = create_dgroup_dict,
    )
    print('After ddb_client.put_item():', ' result_ddb ', result_ddb)

#    return Response_DGroup.parse_obj(create_dgroup_dict)
    return Response_DGroup.parse_obj(result_iot)

@app.put("/items/{id}", response_model=Response_Item)
def update_item(id: str):
    """
    Item アイテムを更新する
    """
    print('update_item(): In')

    # Item アップデート処理
    return {
        "id": id,
        "createdAt": "2000-04-25T12:00:01+09:00"
    }

@app.delete("/items/{id}")
def delete_item(id: str):
    """
    Item アイテムを削除する
    """
    print('delete_item(): In')

    # Item 削除処理
    return {
        "id": id,
        "createdAt": "2000-04-25T12:00:01+09:00"
    }


handler = Mangum(app)