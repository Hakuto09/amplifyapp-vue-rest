import os
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from mangum import Mangum
from aws_lambda_powertools import Logger
from pydantic import BaseModel
import boto3
import uuid

# 環境変数取得
ENV = os.environ['ENV']
print('ENV ', ENV)
#STORAGE_DB_NAME = os.environ.get("STORAGE_DB_NAME")
STORAGE_DB_NAME = 'dynamo29652a67'
print('STORAGE_DB_NAME ', STORAGE_DB_NAME)

# boto3 初期化
ddb = boto3.resource("dynamodb")
table = ddb.Table(STORAGE_DB_NAME)

## FastAPI 初期化
app = FastAPI(
    title="AmplifyFastAPI",
    root_path=f"/{ENV}",
    openapi_url="/openapi.json"
)

# ロガー初期化
app.logger = Logger(level="INFO", service=__name__)

# CORS設定
allow_origins = ['http://localhost:8080']
if 'ALLOW_ORIGIN' in os.environ.keys():
    allow_origins.append(os.environ['ALLOW_ORIGIN'])

app.add_middleware(
    CORSMiddleware,
    allow_origins=allow_origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# スキーマ設定
class Request(BaseModel):
    """
    リクエストスキーマ
    """
    createdAt: str

class Response(BaseModel):
    """
    レスポンススキーマ
    """
    id: str
    createdAt: str


@app.get("/items")
def get_items_list():
    """
    Item 一覧を取得する
    """
    # Item 一覧取得処理を書く
    return {
        "id": "1",
        "createdAt": "2000-04-25T12:00:01+09:00"
    }

@app.get("/items/{id}")
def get_item(id: str):
    """
    Item アイテムを取得する
    """
    key = {
        "id": id
    }

    response = table.get_item(Key=key)

    return Response.parse_obj(response["Item"])

@app.post("/items", response_model=Response)
def post_item(item_in: Request):
    """
    Item アイテムを取得する
    """
    id = str(uuid.uuid4())
    print('id ', id)
    create_item = item_in.dict()
    print('create_item ', create_item)
    create_item["id"] = id
    print('create_item["id"] ', create_item["id"])

    result = table.put_item(Item=create_item)
    app.logger.info(result)

    return Response.parse_obj(create_item)

@app.put("/items/{id}", response_model=Response)
def update_item(id: str):
    """
    Item アイテムを更新する
    """
    # Item アップデート処理
    return {
        "id": id,
        "createdAt": "2000-04-25T12:00:01+09:00"
    }

@app.delete("/items/{id}")
def delete_item(id: str):
    """
    Item アイテムを削除する
    """
    # Item 削除処理
    return {
        "id": id,
        "createdAt": "2000-04-25T12:00:01+09:00"
    }


handler = Mangum(app)