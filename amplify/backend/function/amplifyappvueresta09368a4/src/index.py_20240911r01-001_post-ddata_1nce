import os
from fastapi import FastAPI, HTTPException
#from fastapi.responses import JSONResponse
#from fastapi.responses import PlainTextResponse
#from starlette.exceptions import HTTPException as StarletteHTTPException
#from fastapi.middleware.cors import CORSMiddleware
from starlette.middleware.cors import CORSMiddleware    # no effect
from mangum import Mangum
from aws_lambda_powertools import Logger
from pydantic import BaseModel
import boto3
import uuid
from boto3.dynamodb.conditions import Key, Attr
import json
from typing import Set, Union


# 環境変数取得
ENV = os.environ['ENV']
print('ENV ', ENV)

#STORAGE_DB_NAME = os.environ.get("STORAGE_DB_NAME")
#STORAGE_DB_NAME = 'dynamo29652a67-dev'      # for debug only.
STORAGE_DB_NAME = 'dynamo29652a67-' + ENV      # for debug only.
print('STORAGE_DB_NAME ', STORAGE_DB_NAME)

#STORAGE_DB_ACCOUNTS = 'amplifyappvuerest_accounts'
#STORAGE_DB_ACCOUNTS = 'amplifyappvuerest-dev_accounts'
STORAGE_DB_ACCOUNTS = 'amplifyappvuerest-' + ENV + '_accounts'
print('STORAGE_DB_NAME ', STORAGE_DB_ACCOUNTS)

#STORAGE_DB_DGROUPS = 'amplifyappvuerest_dgroups'
#STORAGE_DB_DGROUPS = 'amplifyappvuerest-dev_dgroups'
STORAGE_DB_DGROUPS = 'amplifyappvuerest-' + ENV + '_dgroups'
print('STORAGE_DB_NAME ', STORAGE_DB_DGROUPS)

#STORAGE_DB_DEVICES = 'amplifyappvuerest_devices'
#STORAGE_DB_DEVICES = 'amplifyappvuerest-dev_devices'
STORAGE_DB_DEVICES = 'amplifyappvuerest-' + ENV + '_devices'
print('STORAGE_DB_NAME ', STORAGE_DB_DEVICES)

#STORAGE_DB_DDATA = 'amplifyappvuerest_ddata'
#STORAGE_DB_DDATA = 'amplifyappvuerest-dev_ddata'
STORAGE_DB_DDATA = 'amplifyappvuerest-' + ENV + '_ddata'
print('STORAGE_DB_NAME ', STORAGE_DB_DDATA)

# boto3 IoT Core 初期化
client_iot = boto3.client('iot')

# boto3 DynamoDB 初期化
resource_ddb = boto3.resource("dynamodb")
ddb_table = resource_ddb.Table(STORAGE_DB_NAME)
ddb_table_accounts = resource_ddb.Table(STORAGE_DB_ACCOUNTS)
ddb_table_dgroups = resource_ddb.Table(STORAGE_DB_DGROUPS)
ddb_table_devices = resource_ddb.Table(STORAGE_DB_DEVICES)
ddb_table_ddata = resource_ddb.Table(STORAGE_DB_DDATA)

client_ddb = boto3.client('dynamodb')


## FastAPI 初期化
app = FastAPI(
    title="AmplifyFastAPI",
    root_path=f"/{ENV}",
    openapi_url="/openapi.json"
)

# ロガー初期化
app.logger = Logger(level="INFO", service=__name__)

# CORS設定
#allow_origins = ['http://localhost:8080']
if ENV == 'dev':
    allow_origins = ['https://main.d2c5unubsoy5p6.amplifyapp.com']
elif ENV == 'staging':
    allow_origins = ['https://feature.d2c5unubsoy5p6.amplifyapp.com']

print('allow_origins ', allow_origins)

if 'ALLOW_ORIGIN' in os.environ.keys():
    allow_origins.append(os.environ['ALLOW_ORIGIN'])
    print('After allow_origins.append()')

app.add_middleware(
    CORSMiddleware,
    allow_origins=allow_origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

"""
スキーマ設定
"""
# Item用リクエストスキーマ
class Request_Item(BaseModel):
    id: str
    createdAt: str

# Item用レスポンススキーマ
class Response_Item(BaseModel):
    id: str
    createdAt: str

# アカウント登録用リクエストスキーマ
class Request_PostAccount(BaseModel):
    account_id: str
    account_name: str
    email: str
    password: str

# アカウント登録用レスポンススキーマ
class Response_PostAccount(BaseModel):
    account_name: str
    email: str
    password: str

# デバイスグループ登録用リクエストスキーマ
class Request_PostDGroup(BaseModel):
#    dgroup_id: str
    dgroup_name: str
    account_id: str
    check_existing_flag: int

# デバイスグループ登録用レスポンススキーマ
class Response_PostDGroup(BaseModel):
#    dgroup_name: str
    thingGroupName: str
    thingGroupId: str

# デバイスグループ削除用リクエストスキーマ
class Request_DeleteDGroup(BaseModel):
#    dgroup_id: str
    dgroup_name: str
    account_id: str

# デバイスグループ削除用レスポンススキーマ
class Response_DeleteDGroup(BaseModel):
#    dgroup_name: str
#    thingGroupName: str
#    thingGroupId: str
#    ResponseMetadata: str      # error: Input should be a valid string
    ResponseMetadata: object
#    HTTPStatusCode: str

# デバイス登録用リクエストスキーマ
class Request_PostDevice(BaseModel):
#    device_id: str
    device_name: str
    dgroup_id: str
    account_id: str
    csr: str
    check_existing_flag: int

# デバイス登録用レスポンススキーマ
class Response_PostDevice(BaseModel):
#    thingName: str
#    thingId: str
    certificatePem: str
    PrivateKey: str

# デバイスデータ登録 (1NCE Webhook) 用リクエストスキーマ
"""
{
  "payload": {
    "type": "JSON",
    "value": {
      "temperature": 11.1
    }
  },
  "received": "1726030551987",
  "id": "1-66e122d7-c01ae7d96af483ca64d340df",
  "source": "UDP",
  "type": "TELEMETRY_DATA",
  "version": "1.0.0",
  "device": {
    "iccid": "8988228066605204483",
    "ip": "10.52.132.3",
    "imsi": "901405105204483"
  }
}
"""

class Value(BaseModel):
    temperature: float

class Payload(BaseModel):
    type: str
    value: Union[Value, None] = None

class Device(BaseModel):
    iccid: str
    ip: str
    imsi: str

class Response_PostDdata(BaseModel):
    payload: Union[Payload, None] = None
    received: str
    id: str
    source: str
    type: str
    version: str
    device: Union[Device, None] = None

# デバイス削除用リクエストスキーマ
class Request_DeleteDevice(BaseModel):
#    device_id: str
    device_name: str
    dgroup_id: str

# デバイス削除用レスポンススキーマ
class Response_DeleteDevice(BaseModel):
#    thingName: str
#    thingId: str
    ResponseMetadata: object
    
@app.get("/env")
def get_env():
    """
    バックエンド環境名を取得する
    """
    print('get_env(): In')
    return {
        "env": ENV
    }

@app.get("/items")
def get_items_list():
    """
    Item 一覧を取得する
    """
    print('get_items_list(): In')

    # Item 一覧取得処理を書く
    return {
        "id": "test",
        "createdAt": "2000-04-25T12:00:01+09:00"
    }

#    response = ddb_table.query(
#      KeyConditionExpression = Key("id").eq(id), # 取得するKey情報
#      ScanIndexForward = False, # 昇順か降順か(デフォルトはTrue=昇順)
#      Limit = 1 # 取得するデータ件数
#    )
#    print('response ', response)
#
#    return response["Items"]

@app.get("/accounts")
def get_accounts_list():
    """
    アカウントの一覧を取得する
    """
    print('get_accounts_list(): In')

#    response_ddb = client_ddb.scan(
    response_ddb = ddb_table_accounts.scan(
#      TableName = STORAGE_DB_ACCOUNTS,
#      KeyConditionExpression = Key("account_id").eq(account_id), # 取得するKey情報
#      FilterExpression = Attr('createdAt').contains('d0001'),
#      FilterExpression = Attr('createdAt2').between(createdat_min, createdat_max),
#        ScanIndexForward = False, # 昇順か降順か(デフォルトはTrue=昇順)
        Limit = 100 # 取得するデータ件数
    )
    print('get_accounts_list():', ' response_ddb ', response_ddb)

    return response_ddb["Items"]

@app.get("/dgroups/{account_id}")
def get_dgroups_list(account_id: str):
    """
    アカウントに紐付くデバイスグループの一覧を取得する
    """
    print('get_dgroups_list(): In')

#    response_ddb = client_ddb.scan(
    response_ddb = ddb_table_dgroups.scan(
#    response_ddb = ddb_table_dgroups.query(
#        TableName = STORAGE_DB_DGROUPS,
#        KeyConditionExpression = Key("account_id").eq(account_id), # 取得するKey情報
        FilterExpression = Attr('account_id').eq(account_id),
#        ScanIndexForward = True, # 昇順か降順か(デフォルトはTrue=昇順)
        Limit = 100 # 取得するデータ件数
    )
    print('After ddb_table_dgroups.scan():', ' response_ddb ', response_ddb)

    return response_ddb["Items"]

#@app.get("/devices/{dgroup_id}")
@app.get("/_devices/{dgroup_id}")
def get_devices_list(dgroup_id: str):
    """
    デバイスグループに紐付くデバイスの一覧を取得する
    """
    print('get_devices_list(): In')

    response_ddb = ddb_table_devices.scan(
#    response_ddb = ddb_table_devices.query(
#        TableName = STORAGE_DB_DEVICES,
#        KeyConditionExpression = Key("dgroup_id").eq(dgroup_id), # 取得するKey情報
        FilterExpression = Attr('dgroup_id').eq(dgroup_id),
#        ScanIndexForward = True, # 昇順か降順か(デフォルトはTrue=昇順)
        Limit = 100 # 取得するデータ件数
    )
    print('After ddb_table_devices.scan():', ' response_ddb ', response_ddb)

    return response_ddb["Items"]

@app.get("/ddata/{device_id}")
def get_ddata_list_all(device_id: str):
    """
    デバイスに紐付くデバイスデータの一覧を取得する (日時期間なし)
    """
    print('get_ddata_list_all(): In')

    print('device_id ', device_id)

#    response_ddb = ddb_table_ddata.scan(
    response_ddb = ddb_table_ddata.query(
#        TableName = STORAGE_DB_DDATA,
        KeyConditionExpression = Key("device_id").eq(device_id), # 取得するKey情報
#        FilterExpression = Attr('device_id').eq(device_id),
#        FilterExpression = Attr('createdAt_c').between(date_start, date_end),
        ScanIndexForward = True, # 昇順か降順か(デフォルトはTrue=昇順)
        Limit = 1000 # 取得するデータ件数
    )
    print('After ddb_table_ddata.query():', ' response_ddb ', response_ddb)

    return response_ddb["Items"]

@app.get("/ddata_between/{device_id}")
def get_ddata_list_between(device_id: str, date_start: str, date_end: str):
    """
    デバイスに紐付くデバイスデータの一覧を取得する (日時期間あり)
    """
    print('get_ddata_list_between(): In')

    print('device_id ', device_id)
    print('date_start ', date_start)
    print('date_end ', date_end)

#    response_ddb = ddb_table_ddata.scan(
    response_ddb = ddb_table_ddata.query(
#        TableName = STORAGE_DB_DDATA,
        KeyConditionExpression = Key("device_id").eq(device_id), # 取得するKey情報
#        FilterExpression = Attr('device_id').eq(device_id),
        FilterExpression = Attr('createdAt_c').between(date_start, date_end),
        ScanIndexForward = True, # 昇順か降順か(デフォルトはTrue=昇順)
        Limit = 1000 # 取得するデータ件数
    )
    print('After ddb_table_ddata.query():', ' response_ddb ', response_ddb)

    return response_ddb["Items"]

@app.get("/items/{id}")
def get_items(id: str):
    """
    Item アイテムを取得する
    """
    print('get_items(): In')
    print('id ', id)

#    key = {
#        "id": id
#    }
#    print('id ', id)
#    print('key ', key)

    #response = ddb_table.get_item(Key=key)
    #print('response ', response)

    #queryData = ddb_table.query(
    response = ddb_table.query(
    #  KeyConditionExpression = Key("id").eq("your-partition-key-data") & Key("createdAt").eq("your-sort-key-data"), # 取得するKey情報
      KeyConditionExpression = Key("id").eq(id), # 取得するKey情報
#      FilterExpression = Attr('devices').contains('d0001'),
      ScanIndexForward = False, # 昇順か降順か(デフォルトはTrue=昇順)
#      Limit = 1 # 取得するデータ件数
    )
    #print('queryData ', queryData)
    print('response ', response)

#    return Response.parse_obj(response["Item"])    # Error
#    return Response.parse_obj(response["Items"])   # Error
#    print('Befre return Response.parse_obj(response["LastEvaluatedKey"])')
#    return Response.parse_obj(response["LastEvaluatedKey"])    # OK
#    print('Befre return Response.parse_obj(response["Items"][0])')
#    return Response.parse_obj(response["Items"][0])     #OK
    print('Befre return response["Items"]')
    return response["Items"]

@app.get("/items2/{id}")
def get_items_between(id: str, createdat_min: str, createdat_max: str):
    """
    Item アイテムを取得する
    """
    print('get_items_between(): In')
    print('createdat_min ', createdat_min)
    print('createdat_max ', createdat_max)

    key = {
        "id": id
    }
    print('key ', key)

    response = ddb_table.query(
    #  KeyConditionExpression = Key("id").eq("your-partition-key-data") & Key("createdAt").eq("your-sort-key-data"), # 取得するKey情報
      KeyConditionExpression = Key("id").eq(id), # 取得するKey情報
#      FilterExpression = Attr('createdAt').contains('d0001'),
      FilterExpression = Attr('createdAt2').between(createdat_min, createdat_max),
      ScanIndexForward = False, # 昇順か降順か(デフォルトはTrue=昇順)
#      Limit = 1 # 取得するデータ件数
    )
    #print('queryData ', queryData)
    print('response ', response)

    print('Befre return response["Items"]')
    return response["Items"]

@app.get("/account/{account_id}")
def get_account(account_id: str):
    """
    アカウントを取得する
    """
    print('get_account(): In')

    key = {
        "account_id": account_id
    }
    print('key ', key)

    response_ddb = ddb_table_accounts.query(
    #  KeyConditionExpression = Key("id").eq("your-partition-key-data") & Key("createdAt").eq("your-sort-key-data"), # 取得するKey情報
      KeyConditionExpression = Key("account_id").eq(account_id), # 取得するKey情報
#      FilterExpression = Attr('createdAt').contains('d0001'),
#      FilterExpression = Attr('createdAt2').between(createdat_min, createdat_max),
      ScanIndexForward = False, # 昇順か降順か(デフォルトはTrue=昇順)
#      Limit = 1 # 取得するデータ件数
    )
    #print('queryData ', queryData)
    print('get_account():', ' response_ddb ', response_ddb)

    print('get_account(): Befre return response["Items"]')
    return response_ddb["Items"]

@app.post("/items", response_model=Response_Item)
def post_item(item_in: Request_Item):
    """
    Itemを登録する
    """
    print('post_item(): In')

    #id = str(uuid.uuid4())
    #print('id ', id)
    create_item = item_in.dict()
    print('create_item ', create_item)
    #create_item["id"] = id
    #print('create_item["id"] ', create_item["id"])

    #print('create_item ', create_item)
    response = ddb_table.put_item(Item=create_item)
    app.logger.info(response)

    return Response_Item.parse_obj(create_item)

# Temporary comment out for security.
#@app.post("/account", response_model=Response_PostAccount)
#def post_account(_in: Request_PostAccount):
#    """
#    アカウントを登録する
#    """
#    print('post_account(): In')
#
#    create_account = _in.dict()
#    print('create_account ', create_account)
#
#    response_ddb = ddb_table_accounts.put_item(
#        Item = create_account,
#    )
#    print('post_account():', ' response_ddb ', response_ddb)
#
#    return Response_PostAccount

@app.post("/dgroup", response_model=Response_PostDGroup)
def post_dgroup(_in: Request_PostDGroup):
    """
    デバイスグループ関連リソースを登録する
    """
    print('post_dgroup(): In')

    create_dgroup_dict = _in.dict()
    print('create_dgroup_dict ', create_dgroup_dict)

    create_dgroup_json = json.dumps(create_dgroup_dict)     # degug only.
    print('create_dgroup_json ', create_dgroup_json)

    # Check allowed user with DynamoDB.
    account_id = create_dgroup_dict.get('account_id')
    response_ddb = ddb_table_accounts.get_item(
        Key = { 'account_id': account_id },
    )
    print('After ddb_table_accounts.get_item():', ' response_ddb ', response_ddb)

    accountInfo = response_ddb['Item']
    print('After accountInfo = response_ddb[\'Item\']:', ' accountInfo ', accountInfo)
#    if (accountInfo == '') :
#        print('Before return -1')
#        return -1

    ### IoT Core access.
    dgroup_name = create_dgroup_dict.get('dgroup_name')
    account_id_dgroup_name = account_id + '_' + dgroup_name
    account_id_dgroup_name = account_id_dgroup_name.replace('-', '')
    check_existing_flag = create_dgroup_dict.get('check_existing_flag')
    del create_dgroup_dict['check_existing_flag']
    print('After create_dgroup_dict.get():', ' dgroup_name ', dgroup_name, ' account_id ', account_id, ' account_id_dgroup_name ', account_id_dgroup_name, " check_existing_flag ", check_existing_flag)

    if check_existing_flag == 1:
        # Check dgroup_name existing.
        response_iot_dgroup = client_iot.describe_thing_group(
#            thingGroupName = dgroup_name,
            thingGroupName = account_id_dgroup_name,
        )
        print('After client_iot.describe_thing_group():', ' response_iot_dgroup ', response_iot_dgroup)
        return Response_PostDGroup.parse_obj(response_iot_dgroup)

    # Create thingGroup
    response_iot_dgroup = client_iot.create_thing_group(
#        thingGroupName = dgroup_name,
        thingGroupName = account_id_dgroup_name,
    )
    print('After client_iot.create_thing_group():', ' response_iot_dgroup ', response_iot_dgroup)

    dgroup_id = response_iot_dgroup.get('thingGroupId')
    create_dgroup_dict['dgroup_id'] = dgroup_id
    print('After response_iot_dgroup.get(\'thingGroupId\'):', ' create_dgroup_dict ', create_dgroup_dict)

    # Create topic rule
#    ruleName = 'Hkt_aws_iot_rule_to_dynamodb_' + dgroup_name
    ruleName = 'Hkt_' + account_id_dgroup_name
#    topicName = "'" + dgroup_name + "/+'"
#    topicName = "'" + account_id_dgroup_name + "/+'"
    topicName = "'" + dgroup_id + "/+'"
    roleArn = 'arn:aws:iam::366256405539:role/Hkt_aws_iam-role_AmazonDynamoDBFullAccess'
    print('Before client_iot.create_topic_rule():', ' dgroup_id ', dgroup_id, ' dgroup_name ', dgroup_name, ' ruleName ', ruleName, ' topicName ', topicName, ' roleArn ', roleArn)
    response_iot_rule = client_iot.create_topic_rule(
        ruleName = ruleName,
        topicRulePayload = {
#            'sql': "SELECT * from " + topicName,
#            'sql': "SELECT device_name AS device_name, createdAt as createdAt, createdAt as createdAt_c, data0 as data0, data1 as data1, data2 as data2 FROM " + topicName,
            'sql': "SELECT device_id AS device_id, createdAt as createdAt, createdAt as createdAt_c, data0 as data0, data1 as data1, data2 as data2 FROM " + topicName,
            'actions': [
                {
                    'dynamoDBv2': {
                        'roleArn': roleArn,
                        'putItem': {
                            'tableName': STORAGE_DB_DDATA,
                        }
                    }
                }
            ]
        }
    )
    print('After client_iot.create_topic_rule():', ' response_iot_rule ', response_iot_rule)

    # Enable topic rule
    response_iot_rule2 = client_iot.enable_topic_rule(
        ruleName = ruleName,
    )
    print('After client_iot.enable_topic_rule():', ' response_iot_rule2 ', response_iot_rule2)

    ### DynamoDB access
#    response_ddb = client_ddb.put_item(
    response_ddb = ddb_table_dgroups.put_item(
#        TableName = STORAGE_DB_DGROUPS,
        Item = create_dgroup_dict,
    )
#    print('After client_ddb.put_item():', ' response_ddb ', response_ddb)
    print('After ddb_table_dgroups.put_item():', ' response_ddb ', response_ddb)

    return Response_PostDGroup.parse_obj(response_iot_dgroup)

#@app.post("/device", response_model=Response_PostDevice)
@app.post("/_device", response_model=Response_PostDevice)
def post_device(_in: Request_PostDevice):
    """
    デバイス関連リソースを登録する
    """
    print('post_device(): In')

    create_device_dict = _in.dict()
    print('create_device_dict ', create_device_dict)

    ### IoT Core access.
    device_name = create_device_dict.get('device_name')
    dgroup_id = create_device_dict.get('dgroup_id')
    dgroup_id_device_name = dgroup_id + '_' + device_name
    dgroup_id_device_name = dgroup_id_device_name.replace('-', '')
    account_id = create_device_dict.get('account_id')
    del create_device_dict['account_id']
    csr = create_device_dict.get('csr')
    del create_device_dict['csr']
    check_existing_flag = create_device_dict.get('check_existing_flag')
    del create_device_dict['check_existing_flag']
    print('After create_device_dict.get():', ' create_device_dict ', create_device_dict, ' device_name ', device_name, ' dgroup_id ', dgroup_id, ' dgroup_id_device_name ', dgroup_id_device_name, ' csr ', csr, ' check_existing_flag ', check_existing_flag)

    if csr == '' :
        useCsr = 0
    else :
        useCsr = 1
    print('After set useCsr:', ' csr ', csr, ' useCsr ', useCsr)

    if check_existing_flag == 1:
        # Check dgroup_name existing.
        response_iot_device = client_iot.describe_thing(
#            thingGroupName = dgroup_name,
            thingName = dgroup_id_device_name,
        )
        print('After client_iot.describe_thing():', ' response_iot_device ', response_iot_device)

        if useCsr :
            return {
                'certificatePem': ''
            }
        else :
            return {
                'certificatePem': '',
                'PrivateKey': '',
            }

    # Create thing
    response_iot_device = client_iot.create_thing(
#        thingName = create_device_dict.get('device_name'),
        thingName = dgroup_id_device_name,
    )
    print('After client_iot.create_thing():', ' response_iot_device ', response_iot_device)

    device_id = response_iot_device.get('thingId')
    create_device_dict['device_id'] = device_id
    print('After response_iot_thing.get(\'thingId\'):', ' create_device_dict ', create_device_dict)

    # Get dgroup_name with dgroup_id.
    response_ddb = ddb_table_dgroups.query(
        KeyConditionExpression = Key("dgroup_id").eq(dgroup_id), # 取得するKey情報
        ScanIndexForward = False, # 昇順か降順か(デフォルトはTrue=昇順)
    )
    print('After ddb_table_groups.query():', ' response_ddb ', response_ddb, ' response_ddb[\'Items\'][0] ', response_ddb['Items'][0])
    dgroup_name = response_ddb['Items'][0].get('dgroup_name')
    print('After response_ddb.get():', ' dgroup_name ', dgroup_name)

    account_id_dgroup_name = account_id + '_' + dgroup_name
    account_id_dgroup_name = account_id_dgroup_name.replace('-', '')
    print('After create_device_dict.get() 2:', ' account_id ', account_id, ' account_id_dgroup_name ', account_id_dgroup_name)

    # Add device to dgroup
    response_iot_dgroup = client_iot.add_thing_to_thing_group(
#        thingGroupName = dgroup_name,
        thingGroupName = account_id_dgroup_name,
#        thingGroupArn='string',
        thingName = dgroup_id_device_name,
#        thingArn='string',
#        overrideDynamicGroups=True|False
    )
    print('After client_iot.add_thing_to_thing_group():', ' response_iot_dgroup ', response_iot_dgroup)

    if csr == '' :
#        useCsr = 0
        response_iot_csr = client_iot.create_keys_and_certificate(
            setAsActive = True,
        )
    else :
#        useCsr = 1
        response_iot_csr = client_iot.create_certificate_from_csr(
            certificateSigningRequest = csr,
            setAsActive = True,
        )
    print('After client_iot.create_certificate_from_csr():', ' useCsr ', useCsr, ' response_iot_csr ', response_iot_csr)

    certificateArn = response_iot_csr['certificateArn']
    certificatePem = response_iot_csr['certificatePem']
    PublicKey = response_iot_csr['keyPair']['PublicKey']
    PrivateKey = response_iot_csr['keyPair']['PrivateKey']
    print('After specify certificateInfo:', ' certificateArn ', certificateArn, ' certificatePem ', certificatePem, ' PublicKey ', PublicKey, ' PrivateKey ', PrivateKey)

    response_iot_policy = client_iot.attach_policy(
        policyName = 'iotDataAccess',
        target = certificateArn,
    )
    print('After client_iot.attach_policy():', ' response_iot_policy ', response_iot_policy)

    response_iot_thing_cert = client_iot.attach_thing_principal(
#        thingName = create_device_dict.get('device_name'),
        thingName = dgroup_id_device_name,
        principal = certificateArn,
    )
    print('After client_iot.attach_thing_principal():', ' response_iot_thing_cert ', response_iot_thing_cert)

    # Dynamo DB Access
#    response_ddb = client_ddb.put_item(
    response_ddb = ddb_table_devices.put_item(
#       TableName = STORAGE_DB_DEVICES,
       Item = create_device_dict,
    )
#    print('After client_ddb.put_item():', ' response_ddb ', response_ddb)
    print('After ddb_table_devices.put_item():', ' response_ddb ', response_ddb)

    if useCsr :
        return {
            'certificatePem': certificatePem
        }
    else :
        return {
            'certificatePem': certificatePem,
            'PrivateKey': PrivateKey
        }

@app.post("/ddata")
def post_ddata(_in: Response_PostDdata):
    """
    デバイスデータを登録する
    """
    print('post_ddata(): In')

    create_ddata_dict = _in.dict()
    print('create_ddata_dict ', create_ddata_dict)

    return

@app.put("/items/{id}", response_model=Response_Item)
def update_item(id: str):
    """
    Item アイテムを更新する
    """
    print('update_item(): In')

    # Item アップデート処理
    return {
        "id": id,
        "createdAt": "2000-04-25T12:00:01+09:00"
    }

@app.delete("/items/{id}")
def delete_item(id: str):
    """
    Item アイテムを削除する
    """
    print('delete_item(): In')

    # Item 削除処理
    return {
        "id": id,
        "createdAt": "2000-04-25T12:00:01+09:00"
    }

@app.delete("/dgroup", response_model=Response_DeleteDGroup)
def delete_dgroup(_in: Request_DeleteDGroup):
    """
    デバイスグループ関連リソースを削除する
    """
    print('delete_dgroup(): In')

    delete_dgroup_dict = _in.dict()
    print('delete_dgroup_dict ', delete_dgroup_dict)

    delete_dgroup_json = json.dumps(delete_dgroup_dict)      # degug only.
    print('delete_dgroup_json ', delete_dgroup_json)

    ### IoT Core access.
#    dgroup_id = delete_dgroup_dict.get('dgroup_id')
    dgroup_name = delete_dgroup_dict.get('dgroup_name')
    account_id = delete_dgroup_dict.get('account_id')
    account_id_dgroup_name = account_id + '_' + dgroup_name
    account_id_dgroup_name = account_id_dgroup_name.replace('-', '')
    print('After delete_dgroup_dict.get():', ' dgroup_name ', dgroup_name, ' account_id ', account_id, ' account_id_dgroup_name ', account_id_dgroup_name)

    # Check whether dgroup has device.
    response_iot_dgroup = client_iot.list_things_in_thing_group(
        thingGroupName = account_id_dgroup_name,
    )
    print('After client_iot.list_things_in_thing_group():', ' response_iot_dgroup ', response_iot_dgroup)

    # Specify devices.
    things = response_iot_dgroup.get('things')
    print('After response_iot_dgroup.get(\'things\'):', ' things ', things)

    if len(things):
        raise HTTPException(status_code=409, detail="This dgroup still has devices.")

    # Check dgroup_name existing.
    response_iot_dgroup = client_iot.describe_thing_group(
        thingGroupName = account_id_dgroup_name,
    )
    print('After client_iot.describe_thing_group():', ' response_iot_dgroup ', response_iot_dgroup)

    # Specify dgroup_id for delete.
    dgroup_id = response_iot_dgroup.get('thingGroupId')
    print('After response_iot_dgroup.get(\'thingGroupId\'):', ' dgroup_id ', dgroup_id)

    # Specify thing_group version.
    version = response_iot_dgroup.get('version')
    print('After response_iot_dgroup.get(\'version\'):', ' version ', version)

    # Delete thingGroup
    response_iot_dgroup = client_iot.delete_thing_group(
        thingGroupName = account_id_dgroup_name,
        expectedVersion = version,
    )
    print('After client_iot.delete_thing_group():', ' response_iot_dgroup ', response_iot_dgroup)

    # Delete topic rule
    ruleName = 'Hkt_' + account_id_dgroup_name
    print('Before client_iot.delete_topic_rule():', ' ruleName ', ruleName)
    response_iot_rule = client_iot.delete_topic_rule(
        ruleName = ruleName,
    )
    print('After client_iot.delete_topic_rule():', ' response_iot_rule ', response_iot_rule)

    ### DynamoDB access
    response_ddb = ddb_table_dgroups.delete_item(
        Key = { 'dgroup_id': dgroup_id },
#        Key = { 'dgroup_id': dgroup_id, 'dgroup_name': dgroup_name, },
    )
    print('After ddb_table_dgroups.delete_item():', ' response_ddb ', response_ddb)

    return Response_DeleteDGroup.parse_obj(response_iot_dgroup)

@app.delete("/_device", response_model=Response_DeleteDevice)
def delete_device(_in: Request_DeleteDevice):
    """
    デバイス関連リソースを削除する
    """
    print('delete_device(): In')

    delete_device_dict = _in.dict()
    print('delete_device_dict ', delete_device_dict)

    ### IoT Core access.
    device_name = delete_device_dict.get('device_name')
    dgroup_id = delete_device_dict.get('dgroup_id')
    dgroup_id_device_name = dgroup_id + '_' + device_name
    dgroup_id_device_name = dgroup_id_device_name.replace('-', '')
    print('After delete_device_dict.get():', ' delete_device_dict ', delete_device_dict, ' device_name ', device_name, ' dgroup_id ', dgroup_id, ' dgroup_id_device_name ', dgroup_id_device_name)

    # Check device existing.
    response_iot_device = client_iot.describe_thing(
        thingName = dgroup_id_device_name,
    )
    print('After client_iot.describe_thing():', ' response_iot_device ', response_iot_device)

    # Specify device_id for delete.
    device_id = response_iot_device.get('thingId')
    print('After response_iot_device.get(\'thingId\'):', ' device_id ', device_id)

    # Specify device version.
    version = response_iot_device.get('version')
    print('After response_iot_dgroup.get(\'version\'):', ' version ', version)

    # Specify thingArn for delete.
#    thingArn = response_iot_device.get('thingArn')
#    print('After response_iot_device.get(\'thingArn\'):', ' thingArn ', thingArn)

    # Get principals related device.
    response_iot_device = client_iot.list_thing_principals(
        thingName = dgroup_id_device_name,
    )
    print('After client_iot.list_thing_principals():', ' response_iot_device ', response_iot_device)

    # Specify principals.
    principals = response_iot_device.get('principals')
    print('After response_iot_device.get(\'principals\'):', ' principals ', principals)

    for i in range(0, len(principals), 1):
        response_iot_device = client_iot.detach_thing_principal(
            thingName = dgroup_id_device_name,
            principal = principals[i],
        )
        print('After client_iot.detach_thing_principal():', ' i ', i, ' response_iot_device ', response_iot_device)

    # Delete device
    response_iot_device = client_iot.delete_thing(
#        thingName = delete_device_dict.get('device_name'),
        thingName = dgroup_id_device_name,
        expectedVersion = version,
    )
    print('After client_iot.delete_thing():', ' response_iot_device ', response_iot_device)

    # Dynamo DB Access
    response_ddb = ddb_table_devices.delete_item(
        Key = { 'device_id': device_id },
#        Key = { 'device_id': device_id, 'device_name': device_name, },
    )
    print('After ddb_table_devices.delete_item():', ' response_ddb ', response_ddb)

    return Response_DeleteDevice.parse_obj(response_iot_device)

@app.delete("/ddata/{device_id}/{createdAt}")
def delete_ddata(device_id: str, createdAt: str):
    """
    デバイスデータを削除する
    """
    print('delete_ddata(): In')

    # Dynamo DB Access
    response_ddb = ddb_table_ddata.delete_item(
        Key = { 'device_id': device_id, 'createdAt': createdAt, },
    )
    print('After ddb_table_ddata.delete_item():', ' response_ddb ', response_ddb)

    return Response_DeleteDevice.parse_obj(response_ddb)


handler = Mangum(app)